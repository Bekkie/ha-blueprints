substitutions:
  open_distance:  '25' # fully open: less than or equal in cm
  close_distance: '80' # closed:     is greater than 230 cm 
  reporting_delta: "5"

esphome:
  name: garage-door
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "xxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garage-Door Fallback Hotspot"
    password: "xxx"

captive_portal:

switch:
  - platform: gpio
    id: garage_button
    pin: 
      number: D5 
      mode: OUTPUT
    restore_mode: ALWAYS_OFF
    name: "Garage relay"
    icon: "mdi:garage"
    internal: true
    on_turn_on:
      - delay: 750ms
      - switch.turn_off: garage_button

sensor:
  - platform: ultrasonic
    trigger_pin: D1
    id: door_distance
    echo_pin: D2
    name: "Ultrasonic Door Sensor"
    internal: true
    update_interval: 1s
    pulse_time: 10us
    timeout: 2m
    unit_of_measurement: cm
    filters:
      - filter_out: nan  # filter timeouts
      - multiply: 100    # from meter to cm
      - median:
          window_size: 15
          send_every: 7
          send_first_at: 6
      - delta: ${reporting_delta}

cover:
  - platform: template
    name: "Garagedeur"
    id: garage_door
    device_class: garage
    open_action:
      - if:
          condition:
            - lambda: "return id(garage_door).position == cover::COVER_CLOSED;"
          then:
            - switch.turn_on: garage_button
            - lambda: |-
                 id(garage_door).current_operation = CoverOperation::COVER_OPERATION_OPENING;
    close_action:
     - if:
          condition:
            - lambda: "return id(garage_door).position == cover::COVER_OPEN;"
          then:
            - switch.turn_on: garage_button
            - lambda: |-
                 id(garage_door).current_operation = CoverOperation::COVER_OPERATION_CLOSING;

    stop_action:
     - if:
          condition:
            lambda: "return id(garage_door).current_operation != CoverOperation::COVER_OPERATION_IDLE;"
          then:
            - switch.turn_on: garage_button
            - lambda: |-
                id(garage_door).position = (id(garage_door).current_operation == CoverOperation::COVER_OPERATION_OPENING) ? COVER_OPEN : COVER_CLOSED;
                id(garage_door).current_operation = CoverOperation::COVER_OPERATION_IDLE;

    lambda: |-
      auto new_status = id(garage_door).position;
      if (id(door_distance).state < ${open_distance}) {
        if (id(garage_door).position == COVER_CLOSED) {
           id(garage_door).current_operation = CoverOperation::COVER_OPERATION_IDLE;
           new_status = COVER_OPEN;
        } 
      } 
      if (id(door_distance).state > ${close_distance}) {
        if (id(garage_door).position == COVER_OPEN) {
           id(garage_door).current_operation = CoverOperation::COVER_OPERATION_IDLE;
           new_status = COVER_CLOSED;
        }
      }
      return new_status;

status_led:
  pin: 
    number: D4
    inverted: true  
